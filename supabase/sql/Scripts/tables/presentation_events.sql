create table public.presentation_events
(
    id                   bigint generated by default as identity
        primary key,
    created_at           timestamp with time zone default now() not null,
    created_by           uuid                     default auth.uid()
                                                                references auth.users
                                                                    on update cascade on delete set null,
    value                json,
    presentation         bigint                                 not null
        references public.presentations
            on update cascade on delete cascade,
    type                 event_type                             not null,
    created_by_alias     text,
    created_by_anon_uuid uuid,
    is_public            boolean                  default false not null
);

alter table public.presentation_events
    owner to postgres;

grant select, update, usage on sequence public.presentation_events_id_seq to anon;

grant select, update, usage on sequence public.presentation_events_id_seq to authenticated;

grant select, update, usage on sequence public.presentation_events_id_seq to service_role;

create index created_at
    on public.presentation_events (created_at desc);

create index presentation
    on public.presentation_events (presentation);

create index creator
    on public.presentation_events (created_by, created_by_anon_uuid, presentation);

create trigger after_presentation_event_inserted
    after insert
    on public.presentation_events
    for each row
execute procedure public.handle_presentation_event_inserted();

create policy "Enable reading own events" on public.presentation_events
    as permissive
    for select
    using ((SELECT auth.uid() AS uid) = created_by);

create policy "Presenter can see all events for own presentation" on public.presentation_events
    as permissive
    for select
    to authenticated
    using ((SELECT auth.uid() AS uid) IN (SELECT presentations.presenter
                                          FROM presentations
                                          WHERE (presentations.id = presentation_events.presentation)));

create policy "Allow insert for authenticated" on public.presentation_events
    as permissive
    for insert
    to authenticated
    with check (true);

create policy "Insert for Anon with supplied uuid" on public.presentation_events
    as permissive
    for insert
    to anon
    with check (created_by_anon_uuid IS NOT NULL);

grant delete, insert, references, select, trigger, truncate, update on public.presentation_events to anon;

grant delete, insert, references, select, trigger, truncate, update on public.presentation_events to authenticated;

grant delete, insert, references, select, trigger, truncate, update on public.presentation_events to service_role;

